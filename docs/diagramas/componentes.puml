```plantuml
@startuml Diagrama de Componentes - BetAware API

!theme aws-orange
skinparam backgroundColor #F8F9FA
skinparam component {
    BackgroundColor #FFFFFF
    BorderColor #2C3E50
    FontSize 11
}

title **Arquitetura de Componentes - BetAware API**\n**Vis√£o de Implanta√ß√£o e Integra√ß√£o**

' === CAMADA DE APRESENTA√á√ÉO ===
package "üåê **Frontend Applications**" #E3F2FD {
    component [üì± Mobile App\n(React Native)] as mobile_app #9B59B6
    component [üíª Web App\n(Angular)] as web_app #27AE60
    component [üìã Postman/Insomnia\n(API Testing)] as api_client #F39C12
}

' === API GATEWAY (Future) ===
package "üö™ **API Gateway** (Future)" #FFF3E0 {
    component [üîÄ Load Balancer] as lb #E67E22
    component [üõ°Ô∏è Rate Limiting] as rate_limit #E67E22
}

' === APLICA√á√ÉO PRINCIPAL ===
package "üèóÔ∏è **BetAware API (Spring Boot)**" #E8F5E8 {
    
    ' === SECURITY ===
    component [üîê JWT Authentication\nFilter] as jwt_filter #3498DB
    component [üõ°Ô∏è Spring Security\nConfig] as security_config #3498DB
    component [üîë JWT Token\nProvider] as jwt_provider #3498DB
    
    ' === CONTROLLERS ===
    component [üë§ Auth\nController] as auth_controller #2ECC71
    component [üé≤ Aposta\nController] as aposta_controller #2ECC71
    component [‚ù§Ô∏è Health\nController] as health_controller #2ECC71
    
    ' === SERVICES ===
    component [‚öôÔ∏è Auth\nService] as auth_service #F1C40F
    component [üìä Aposta\nService] as aposta_service #F1C40F
    component [üë• UserDetails\nService] as userdetails_service #F1C40F
    
    ' === EXCEPTION HANDLING ===
    component [‚ö†Ô∏è Global Exception\nHandler] as exception_handler #E74C3C
    
    ' === DATA ACCESS ===
    component [üíæ Usuario\nRepository] as usuario_repo #9B59B6
    component [üíæ Aposta\nRepository] as aposta_repo #9B59B6
    component [üóÉÔ∏è JPA/Hibernate\nContext] as jpa_context #8E44AD
    
    ' === DOCUMENTATION ===
    component [üìö Swagger/OpenAPI\nDocumentation] as swagger #16A085
}

' === BANCO DE DADOS ===
package "üóÑÔ∏è **Database Layer**" #FCE4EC {
    database "H2 Database\n(Development)" as h2_db #E91E63
    database "PostgreSQL\n(Production)" as postgres_db #E91E63
}

' === INFRASTRUCTURE ===
package "‚òÅÔ∏è **Infrastructure**" #F3E5F5 {
    component [üê≥ Docker\nContainer] as docker #3498DB
    component [‚ò∏Ô∏è Kubernetes\n(Future)] as k8s #3498DB
    component [üìà Monitoring\n(Future)] as monitoring #E67E22
    component [üìã Logging\nSystem] as logging #95A5A6
}

' === EXTERNAL INTEGRATIONS (Future) ===
package "üîó **External Services** (Future)" #EBDEF0 {
    component [üìß Email\nService] as email_service #8E44AD
    component [üí≥ Payment\nGateway] as payment #8E44AD
    component [üì± Push\nNotifications] as push_notifications #8E44AD
}

' === CONEX√ïES PRINCIPAIS ===

' Frontend para API
mobile_app --> jwt_filter : HTTPS/REST
web_app --> jwt_filter : HTTPS/REST  
api_client --> jwt_filter : HTTPS/REST

' Security Flow
jwt_filter --> security_config
jwt_filter --> jwt_provider
jwt_filter --> userdetails_service

' Controller Layer
jwt_filter --> auth_controller
jwt_filter --> aposta_controller  
jwt_filter --> health_controller

' Service Layer
auth_controller --> auth_service
aposta_controller --> aposta_service
auth_service --> jwt_provider
userdetails_service --> usuario_repo

' Exception Handling
auth_controller --> exception_handler
aposta_controller --> exception_handler
auth_service --> exception_handler
aposta_service --> exception_handler

' Data Access
auth_service --> usuario_repo
aposta_service --> usuario_repo
aposta_service --> aposta_repo
usuario_repo --> jpa_context
aposta_repo --> jpa_context

' Database
jpa_context --> h2_db : Development
jpa_context --> postgres_db : Production

' Documentation
swagger --> auth_controller : Scans
swagger --> aposta_controller : Scans
swagger --> health_controller : Scans

' Infrastructure
docker --> [BetAware API]
logging --> [BetAware API]

' === INTERFACES ===
interface "REST API" as rest_api
interface "JSON/HTTP" as json_http
interface "SQL/JDBC" as sql_jdbc

rest_api - jwt_filter
json_http - mobile_app
json_http - web_app
sql_jdbc - jpa_context

' === PROTOCOLOS E PORTAS ===
note right of mobile_app
    **Protocolo:** HTTPS
    **Porta:** 8080 (dev), 443 (prod)
    **Content-Type:** application/json
    **Authorization:** Bearer <JWT>
end note

note right of h2_db  
    **Development:**
    ‚Ä¢ H2 In-Memory Database
    ‚Ä¢ Console: /h2-console
    ‚Ä¢ Auto DDL: create-drop
    
    **Production:**
    ‚Ä¢ PostgreSQL
    ‚Ä¢ Flyway Migrations
    ‚Ä¢ Connection Pooling
end note

note bottom of exception_handler
    **Intercepta e padroniza:**
    ‚Ä¢ Valida√ß√£o de dados (400)
    ‚Ä¢ Autentica√ß√£o (401) 
    ‚Ä¢ Autoriza√ß√£o (403)
    ‚Ä¢ Recursos n√£o encontrados (404)
    ‚Ä¢ Conflitos de dados (409)
    ‚Ä¢ Erros internos (500)
end note

note top of jwt_provider
    **JWT Configuration:**
    ‚Ä¢ Algorithm: HS512
    ‚Ä¢ Expiration: 24h
    ‚Ä¢ Secret: Configur√°vel
    ‚Ä¢ Claims: username, authorities
end note

@enduml
```
