name: 🔒 SAST Security Analysis Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  schedule:
    # Run security scan daily at 2 AM
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual triggering

permissions:
  security-events: write
  contents: read
  actions: read
  pull-requests: write
  issues: write

env:
  FAIL_BUILD_ON_HIGH: true
  SARIF_UPLOAD: true
  GENERATE_REPORTS: true

jobs:
  semgrep-sast:
    name: 🔍 Semgrep Static Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🔧 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📦 Install Semgrep
      run: |
        python -m pip install --upgrade pip
        pip install semgrep
        
    - name: 🛡️ Run Semgrep Analysis
      run: |
        semgrep \
          --config=p/java-security \
          --config=p/owasp-top-ten \
          --config=p/spring \
          --config=p/jwt \
          --config=.semgrep.yml \
          --sarif \
          --output=semgrep-results.sarif \
          --json \
          --output=semgrep-results.json \
          --verbose \
          src/
          
    - name: 📊 Generate Semgrep Summary
      if: always()
      run: |
        python3 -c "
        import json
        import sys
        
        try:
            with open('semgrep-results.json', 'r') as f:
                data = json.load(f)
            
            results = data.get('results', [])
            high_count = len([r for r in results if r.get('extra', {}).get('severity') == 'ERROR'])
            medium_count = len([r for r in results if r.get('extra', {}).get('severity') == 'WARNING'])
            low_count = len([r for r in results if r.get('extra', {}).get('severity') == 'INFO'])
            
            print(f'# 🔒 Semgrep Security Analysis Results')
            print(f'')
            print(f'| Severity | Count |')
            print(f'|----------|-------|')
            print(f'| 🔴 High | {high_count} |')
            print(f'| 🟠 Medium | {medium_count} |')
            print(f'| 🟡 Low | {low_count} |')
            print(f'')
            print(f'**Total Issues:** {len(results)}')
            
            if high_count > 0:
                print(f'')
                print(f'## ⚠️ High Severity Issues Found')
                for result in results[:3]:  # Show first 3
                    if result.get('extra', {}).get('severity') == 'ERROR':
                        print(f'- **{result.get(\"check_id\", \"Unknown\")}** in `{result.get(\"path\", \"Unknown\")}`')
                        print(f'  {result.get(\"message\", \"No description\")}')
                
                sys.exit(1) if '${{ env.FAIL_BUILD_ON_HIGH }}' == 'true' else sys.exit(0)
        except Exception as e:
            print(f'Error processing results: {e}')
            sys.exit(0)
        "
        
    - name: 📤 Upload SARIF to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always() && env.SARIF_UPLOAD == 'true'
      with:
        sarif_file: semgrep-results.sarif
        
    - name: 📁 Upload Semgrep Artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: semgrep-analysis-results
        path: |
          semgrep-results.sarif
          semgrep-results.json
        retention-days: 30

  dependency-check-sca:
    name: 🛡️ OWASP Dependency Check (SCA)
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: ☕ Setup JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📦 Cache Maven Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 🔍 Run OWASP Dependency Check
      run: |
        mvn org.owasp:dependency-check-maven:check \
          -Dformat=ALL \
          -DfailBuildOnCVSS=7 \
          -DsuppressionsLocation=.dependency-check-suppressions.xml \
          -DautoUpdate=true \
          -Dformats=HTML,JSON,SARIF
          
    - name: 📊 Process Dependency Check Results
      if: always()
      run: |
        if [ -f "target/dependency-check/dependency-check-report.json" ]; then
          python3 -c "
          import json
          import sys
          
          try:
              with open('target/dependency-check/dependency-check-report.json', 'r') as f:
                  data = json.load(f)
              
              dependencies = data.get('dependencies', [])
              total_vulns = 0
              high_vulns = 0
              medium_vulns = 0
              
              for dep in dependencies:
                  vulns = dep.get('vulnerabilities', [])
                  total_vulns += len(vulns)
                  for vuln in vulns:
                      severity = vuln.get('severity', '').upper()
                      if severity in ['HIGH', 'CRITICAL']:
                          high_vulns += 1
                      elif severity == 'MEDIUM':
                          medium_vulns += 1
              
              print(f'# 🛡️ OWASP Dependency Check Results')
              print(f'')
              print(f'| Metric | Value |')
              print(f'|--------|-------|')
              print(f'| Dependencies Scanned | {len(dependencies)} |')
              print(f'| Total Vulnerabilities | {total_vulns} |')
              print(f'| High/Critical | {high_vulns} |')
              print(f'| Medium | {medium_vulns} |')
              
              if high_vulns > 0:
                  print(f'')
                  print(f'## ⚠️ High/Critical Vulnerabilities Found!')
                  sys.exit(1) if '${{ env.FAIL_BUILD_ON_HIGH }}' == 'true' else sys.exit(0)
          except Exception as e:
              print(f'No vulnerabilities file found or error: {e}')
              sys.exit(0)
          "
        else
          echo "No dependency-check report generated"
        fi
        
    - name: 📤 Upload SARIF to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always() && hashFiles('target/dependency-check/dependency-check-report.sarif') != ''
      with:
        sarif_file: target/dependency-check/dependency-check-report.sarif
        category: dependency-check
        
    - name: 📁 Upload Dependency Check Artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-check-results
        path: |
          target/dependency-check/
        retention-days: 30

  sonarqube-analysis:
    name: 📊 SonarQube Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
        
    - name: ☕ Setup JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📦 Cache Maven Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 📦 Cache SonarQube packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
        
    - name: 🧪 Run Tests and Generate Coverage
      run: |
        mvn clean test jacoco:report
        
    - name: 📊 SonarQube Scan
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: |
        if [ -n "$SONAR_TOKEN" ] && [ -n "$SONAR_HOST_URL" ]; then
          mvn sonar:sonar \
            -Dsonar.projectKey=betaware-api \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.security.review.enable=true \
            -Dsonar.qualitygate.wait=true
        else
          echo "⚠️ SonarQube credentials not configured. Skipping analysis."
          echo "Configure SONAR_TOKEN, SONAR_HOST_URL and SONAR_ORGANIZATION secrets to enable SonarQube analysis."
        fi
        
    - name: 📁 Upload SonarQube Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: sonarqube-analysis-results
        path: |
          target/sonar/
          .scannerwork/
        retention-days: 30

  consolidated-report:
    name: 📋 Generate Consolidated Security Report
    runs-on: ubuntu-latest
    needs: [semgrep-sast, dependency-check-sca, sonarqube-analysis]
    if: always()
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📦 Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jinja2 markdown reportlab weasyprint requests
        
    - name: 📥 Download All Analysis Results
      uses: actions/download-artifact@v3
      
    - name: 📊 Generate Comprehensive Security Report
      run: |
        python .github/scripts/generate_security_report.py
        
    - name: 📈 Generate Security Metrics Dashboard
      run: |
        python3 -c "
        import json
        import os
        from datetime import datetime
        
        # Consolidate results from all tools
        results = {
            'timestamp': datetime.now().isoformat(),
            'commit': '${{ github.sha }}',
            'branch': '${{ github.ref_name }}',
            'semgrep': {'high': 0, 'medium': 0, 'low': 0, 'total': 0},
            'dependency_check': {'high': 0, 'medium': 0, 'low': 0, 'total': 0},
            'sonarqube': {'issues': 0, 'security_hotspots': 0}
        }
        
        # Process Semgrep results
        try:
            with open('semgrep-analysis-results/semgrep-results.json', 'r') as f:
                semgrep_data = json.load(f)
                for result in semgrep_data.get('results', []):
                    severity = result.get('extra', {}).get('severity', 'INFO')
                    results['semgrep']['total'] += 1
                    if severity == 'ERROR':
                        results['semgrep']['high'] += 1
                    elif severity == 'WARNING':
                        results['semgrep']['medium'] += 1
                    else:
                        results['semgrep']['low'] += 1
        except:
            pass
        
        # Process Dependency Check results
        try:
            with open('dependency-check-results/dependency-check-report.json', 'r') as f:
                dep_data = json.load(f)
                for dep in dep_data.get('dependencies', []):
                    for vuln in dep.get('vulnerabilities', []):
                        results['dependency_check']['total'] += 1
                        severity = vuln.get('severity', '').upper()
                        if severity in ['HIGH', 'CRITICAL']:
                            results['dependency_check']['high'] += 1
                        elif severity == 'MEDIUM':
                            results['dependency_check']['medium'] += 1
                        else:
                            results['dependency_check']['low'] += 1
        except:
            pass
        
        # Calculate overall security score
        total_high = results['semgrep']['high'] + results['dependency_check']['high']
        total_medium = results['semgrep']['medium'] + results['dependency_check']['medium']
        total_issues = results['semgrep']['total'] + results['dependency_check']['total']
        
        security_score = max(0, 100 - (total_high * 20) - (total_medium * 5))
        results['security_score'] = security_score
        
        # Generate summary for PR comment
        summary = f'''# 🔒 Security Analysis Summary
        
**Overall Security Score: {security_score}/100**

| Tool | High | Medium | Low | Total |
|------|------|--------|-----|-------|
| 🔍 Semgrep | {results['semgrep']['high']} | {results['semgrep']['medium']} | {results['semgrep']['low']} | {results['semgrep']['total']} |
| 🛡️ Dependency Check | {results['dependency_check']['high']} | {results['dependency_check']['medium']} | {results['dependency_check']['low']} | {results['dependency_check']['total']} |

**Status:** {'✅ PASS' if total_high == 0 else '❌ FAIL - High severity issues found'}

📋 [View detailed reports in artifacts](../actions/runs/${{ github.run_id }})
        '''
        
        with open('security-summary.md', 'w') as f:
            f.write(summary)
            
        with open('security-metrics.json', 'w') as f:
            json.dump(results, f, indent=2)
        "
        
    - name: 📤 Upload Consolidated Report
      uses: actions/upload-artifact@v3
      with:
        name: consolidated-security-report
        path: |
          security-report.html
          security-report.md
          security-summary.md
          security-metrics.json
        retention-days: 90
        
    - name: 💬 Comment PR with Security Summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('security-summary.md')) {
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            // Find existing security comment
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const existingComment = comments.data.find(comment => 
              comment.body.includes('🔒 Security Analysis Summary')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }
          }

  quality-gate:
    name: 🚪 Security Quality Gate
    runs-on: ubuntu-latest
    needs: [semgrep-sast, dependency-check-sca]
    if: always()
    
    steps:
    - name: 📥 Download Analysis Results
      uses: actions/download-artifact@v3
      
    - name: 🚨 Evaluate Security Quality Gate
      run: |
        python3 -c "
        import json
        import sys
        
        high_severity_count = 0
        critical_count = 0
        
        # Check Semgrep results
        try:
            with open('semgrep-analysis-results/semgrep-results.json', 'r') as f:
                semgrep_data = json.load(f)
                for result in semgrep_data.get('results', []):
                    severity = result.get('extra', {}).get('severity', 'INFO')
                    if severity == 'ERROR':
                        high_severity_count += 1
        except:
            pass
        
        # Check Dependency Check results
        try:
            with open('dependency-check-results/dependency-check-report.json', 'r') as f:
                dep_data = json.load(f)
                for dep in dep_data.get('dependencies', []):
                    for vuln in dep.get('vulnerabilities', []):
                        severity = vuln.get('severity', '').upper()
                        if severity == 'CRITICAL':
                            critical_count += 1
                        elif severity == 'HIGH':
                            high_severity_count += 1
        except:
            pass
        
        print(f'🔍 Security Quality Gate Analysis:')
        print(f'Critical vulnerabilities: {critical_count}')
        print(f'High severity vulnerabilities: {high_severity_count}')
        
        if critical_count > 0:
            print(f'❌ QUALITY GATE FAILED: {critical_count} critical vulnerabilities found')
            print(f'🚫 Deploy is BLOCKED until critical issues are resolved')
            sys.exit(1)
        elif high_severity_count > 0:
            print(f'⚠️  QUALITY GATE WARNING: {high_severity_count} high severity vulnerabilities found')
            print(f'🔍 Review required before deployment')
            # Optionally fail on high severity: sys.exit(1)
        else:
            print(f'✅ QUALITY GATE PASSED: No critical or high severity vulnerabilities')
            print(f'🚀 Ready for deployment')
        "

  sonarqube:
    name: SonarQube Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
        
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run Tests and Generate Coverage
      run: |
        mvn clean test jacoco:report
        
    - name: SonarQube Scan
      uses: sonarqube-action@v1.3.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        args: >
          -Dsonar.projectKey=betaware-api
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
          -Dsonar.security.review.enable=true
          -Dsonar.qualitygate.wait=true
          
    - name: Upload SonarQube results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: sonarqube-report
        path: |
          target/sonar/
          .scannerwork/
        retention-days: 30

  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run OWASP Dependency Check
      run: |
        mvn org.owasp:dependency-check-maven:check \
          -Dformat=ALL \
          -DfailBuildOnCVSS=7 \
          -DsuppressionsLocation=.dependency-check-suppressions.xml
          
    - name: Upload Dependency Check results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-check-report
        path: |
          target/dependency-check-report.*
        retention-days: 30
        
    - name: Upload to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always() && hashFiles('target/dependency-check-report.sarif') != ''
      with:
        sarif_file: target/dependency-check-report.sarif

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [semgrep, sonarqube, dependency-check]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jinja2 json5 markdown
        
    - name: Generate Security Report
      run: |
        python .github/scripts/generate_security_report.py
        
    - name: Upload Security Report
      uses: actions/upload-artifact@v3
      with:
        name: security-analysis-report
        path: |
          security-report.html
          security-report.md
        retention-days: 90
        
    - name: Comment PR with Security Summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('security-summary.md')) {
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          }